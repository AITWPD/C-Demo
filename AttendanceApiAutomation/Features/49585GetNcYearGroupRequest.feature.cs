// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttendanceApiAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("49585 - Get NC Year Group", Description="\tAS the department \r\n\tI WANT  to get ncyeargroup codes from a stub\r\n\tSO THAT I ca" +
        "n test that GET method calls to the codes / ncyeargroup request endpoint work", SourceFile="Features\\49585GetNcYearGroupRequest.feature", SourceLine=0)]
    public partial class _49585_GetNCYearGroupFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "49585GetNcYearGroupRequest.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "49585 - Get NC Year Group", "\tAS the department \r\n\tI WANT  to get ncyeargroup codes from a stub\r\n\tSO THAT I ca" +
                    "n test that GET method calls to the codes / ncyeargroup request endpoint work", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 9
testRunner.Given("that the API request is valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET/codes/ncyeargroup request", new string[] {
                "smoke",
                "function"}, SourceLine=11)]
        public virtual void GETCodesNcyeargroupRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "function"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET/codes/ncyeargroup request", null, tagsOfScenario, argumentsOfScenario);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 14
testRunner.Given("the supplier has submitted a GET/codes/ncyeargroup request to the attendances API" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
testRunner.When("the \"Attendance\" request is submitted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
testRunner.Then("a HTTP \"200\" response is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "YearGroupCode",
                            "YearGroup"});
                table2.AddRow(new string[] {
                            "E1",
                            "Early first year"});
                table2.AddRow(new string[] {
                            "E2",
                            "Early second year"});
                table2.AddRow(new string[] {
                            "N1",
                            "Nursery first year"});
                table2.AddRow(new string[] {
                            "N2",
                            "Nursery second year"});
                table2.AddRow(new string[] {
                            "R",
                            "Reception"});
                table2.AddRow(new string[] {
                            "1",
                            "Year 1"});
                table2.AddRow(new string[] {
                            "2",
                            "Year 2"});
                table2.AddRow(new string[] {
                            "3",
                            "Year 3"});
                table2.AddRow(new string[] {
                            "4",
                            "Year 4"});
                table2.AddRow(new string[] {
                            "5",
                            "Year 5"});
                table2.AddRow(new string[] {
                            "6",
                            "Year 6"});
                table2.AddRow(new string[] {
                            "7",
                            "Year 7"});
                table2.AddRow(new string[] {
                            "8",
                            "Year 8"});
                table2.AddRow(new string[] {
                            "9",
                            "Year 9"});
                table2.AddRow(new string[] {
                            "10",
                            "Year 10"});
                table2.AddRow(new string[] {
                            "11",
                            "Year 11"});
                table2.AddRow(new string[] {
                            "12",
                            "Year 12"});
                table2.AddRow(new string[] {
                            "13",
                            "Year 13"});
                table2.AddRow(new string[] {
                            "14",
                            "Year 14"});
                table2.AddRow(new string[] {
                            "M",
                            "Mixed year class - Only to be used for the \'class year group (N00269)\'"});
                table2.AddRow(new string[] {
                            "X",
                            "National curriculum not followed - available for special schools where pupils are" +
                                " not following a particular NC year."});
#line 17
testRunner.And("I should see the following year group values", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
