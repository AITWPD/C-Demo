// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttendanceApiAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("49584 - Get Attendance Codes", Description="\tAS the department \r\n\tI WANT  to get attendance codes from a stub\r\n\tSO THAT I can" +
        " test that GET method calls to the codes / attendance request endpoint work", SourceFile="Features\\49584GetAttendanceRequest.feature", SourceLine=0)]
    public partial class _49584_GetAttendanceCodesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "49584GetAttendanceRequest.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "49584 - Get Attendance Codes", "\tAS the department \r\n\tI WANT  to get attendance codes from a stub\r\n\tSO THAT I can" +
                    " test that GET method calls to the codes / attendance request endpoint work", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 9
testRunner.Given("that the API request is valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("GET/codes/attendance request", new string[] {
                "smoke",
                "function"}, SourceLine=10)]
        public virtual void GETCodesAttendanceRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "function"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET/codes/attendance request", null, tagsOfScenario, argumentsOfScenario);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 13
testRunner.Given("a supplier has submitted a GET/codes/attendance request to the attendances API.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
testRunner.When("the \"Attendance\" request is submitted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
testRunner.Then("a HTTP \"200\" response is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "AttendanceCode",
                            "AttendanceDescription"});
                table1.AddRow(new string[] {
                            "/",
                            "Present (AM)"});
                table1.AddRow(new string[] {
                            "\\",
                            "Present (PM)"});
                table1.AddRow(new string[] {
                            "B",
                            "Approved education activity as pupil being educated off site (not dual registrati" +
                                "on)"});
                table1.AddRow(new string[] {
                            "C",
                            "Authorised absence as pupil is absent due to other authorised circumstances"});
                table1.AddRow(new string[] {
                            "D",
                            "Dual registered (at another establishment) - not counted in possible attendances"});
                table1.AddRow(new string[] {
                            "E",
                            "Authorised absence as pupil is excluded, with no alternative provision made"});
                table1.AddRow(new string[] {
                            "G",
                            "Unauthorised absence as pupil is on a family holiday, not agreed, or is taking da" +
                                "ys in excess of an agreed family holiday"});
                table1.AddRow(new string[] {
                            "H",
                            "Authorised absence due to agreed family holiday"});
                table1.AddRow(new string[] {
                            "I",
                            "Authorised absence due to Illness (NOT medical or dental etc. appointments)"});
                table1.AddRow(new string[] {
                            "J",
                            "Approved education activity as pupil is attending interview"});
                table1.AddRow(new string[] {
                            "L",
                            "Late (before registers closed) marked as present"});
                table1.AddRow(new string[] {
                            "M",
                            "Authorised absence due to medical/ dental appointments"});
                table1.AddRow(new string[] {
                            "N",
                            "Unauthorised absence as pupil missed sessions for a reason that has not yet been " +
                                "provided"});
                table1.AddRow(new string[] {
                            "O",
                            "Unauthorised absence as pupil missed sessions for an unauthorised absence not cov" +
                                "ered by any other code/description"});
                table1.AddRow(new string[] {
                            "P",
                            "Approved education activity as pupil is attending an approved sporting activity"});
                table1.AddRow(new string[] {
                            "R",
                            "Authorised absence due to religious observance"});
                table1.AddRow(new string[] {
                            "S",
                            "Authorised absence due to study leave"});
                table1.AddRow(new string[] {
                            "T",
                            "Authorised absence due to traveller absence"});
                table1.AddRow(new string[] {
                            "U",
                            "Unauthorised absence as pupil arrived after registers closed"});
                table1.AddRow(new string[] {
                            "V",
                            "Approved education activity as pupil is away on an educational visit or trip"});
                table1.AddRow(new string[] {
                            "W",
                            "Approved education activity as pupil is attending work experience"});
                table1.AddRow(new string[] {
                            "X",
                            "Not required to be in school (non-compulsory school age pupil) and not attending " +
                                "in circumstances relating to coronavirus"});
                table1.AddRow(new string[] {
                            "Y",
                            "Unable to attend due to exceptional circumstances - not counted in possible atten" +
                                "dances"});
                table1.AddRow(new string[] {
                            "Z",
                            "Pupil not yet on roll - not counted in possible attendances"});
                table1.AddRow(new string[] {
                            "#",
                            "Planned whole or partial school closure - not counted in possible attendances"});
#line 16
testRunner.And("I should see following absence codes", ((string)(null)), table1, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
